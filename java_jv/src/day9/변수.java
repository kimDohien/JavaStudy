package day9;

public class 변수 {

	public static void main(String[] args) {
		
//		<변수>
//		●참조변수 vs 일반변수(기본 자료형으로 만들어진 변수)
//		●일반변수 :  기본 자료형으로 만들어진 변수
//		●참조변수 :  기본 자료형이 아닌 것들로 만들어진 것
//					배열,객체(string)v.v...
//		
//		●매개변수 : 메소드를 실행하기 위해 필요한 정보를 전달하는 변수
//		  ㄴ인자 	:  메소드를 실행 하기 위해 실제 전달하는 값
//		●지역변수 : 메소드 안에서 선언되어서 사용되는 변수
//		●멤버변수(필드) :  클래스 안에 선언하는 변수
//		  ㄴ인스턴스 필드 
//		  ㄴ클래스 필드
//		
//		●메소드 : [하나의] 기능을 하도록 모아놓은 코드
//		 ㄴ재사용을 통해 코드의 길이를 줄일수있다.
//		 ㄴ기능의 유지보수를 쉽게 하기 위해 사용.
//		 ㄴ구조를 쉽게 파악할수 있다.
//		
//		●메소드 오버로딩 : 동일한 메소드가 여러개 있는것
//		 ㄴ매개변수가 다른 경우 :  종류, 개수
//		 ㄴ같은 이름으로 같은 기능을 실행하는데 매개변수의 종류를 다양하게 만들수 있다. 
//		 	=>편리하게 하기위해 사용
//		 
//		가변인자 => 매개변수의 개수가 미정
//		
//		●클래스
//		ㄴ생성자 : 필드를 초기화
//		ㄴ메소드 : 기능
//		ㄴ멤버변수(필드) : 정보
		
//		클래스 사용하는 이유 
//		=> 클래스을 통해 필드를 편리하게 관리하고 필요한 기능을 구현하여 사용하기 위해서
		
//		<필드 초기화 순서>
//		1.필드 기본값으로 초기화
//		2.명시적 초기화(필드의 int num이라고 선언했으면 num=1이라고 =을 통해 초기화 하는것)
//		3.초기화 블록:{} (초기화 블록 안에서 초기화)
//		4.생성자
		
//		●static
//		-같은 클래스로 만들어진 모든 객체들이 공유한는 필드/메소드에 붙이는 예약어 키워드
//		-특징 :  클래스명 으로 호출
//		-클래스가 메모리에 로딩이 되면 필드와 메소드가 생성
//		
//		●static이 안붙은 필드/메소드 = 인스턴스 필드/메소드, 객체 필드/메소드
//		-각 개체마다 필드/메소드를 가진다
//		-객체명으로 호출
//		-객체를 생성하는 시점에 필드와 메소드가 생성
		
//		static 필드/메소드
//		=>static 메소드/객체메소드에서 사용 가능
		
//		객체 필드/메소드
//		=>객체 메소드에서 사용가능
		
//		●final 필드 : 상수 => 값을 변경할수 없다.
		
		
		
	
}
}